{"version":3,"sources":["App.tsx","serviceWorker.js","models.ts","index.tsx"],"names":["TodoItem","observer","todo","store","onClick","removeTodo","id","type","checked","done","onChange","toggle","value","name","e","setName","currentTarget","UserPickerView","user","assignedTo","onchange","userId","assignTo","TodoCount","completedCount","count","handleUserChange","React","useCallback","maybeId","users","find","u","map","key","UndoRedo","timeTraveller","disabled","canUndo","undo","canRedo","redo","App","addTodo","uuid","v4","todos","Boolean","window","location","hostname","match","LS_SNAPSHOT_KEY","configure","enforceActions","Todo","types","model","identifier","string","boolean","maybe","reference","late","User","actions","self","array","push","create","replace","filter","t","views","length","json","localStorage","getItem","JSON","parse","err","getInitialStoreData","TimeTraveller","targetStore","autorun","stringify","getSnapshot","setItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00fcb455.chunk.js","sourcesContent":["import React, { ChangeEventHandler } from 'react';\nimport './App.css';\nimport { observer } from \"mobx-react\";\nimport { RootStoreModel, TodoModel, UserModel, TimeTravellerModel } from './models';\nimport uuid from 'uuid';\n\nconst TodoItem = observer(({ todo, store }: { todo: TodoModel, store: RootStoreModel }) => {\n  return (\n    <li>\n      <button onClick={() => store.removeTodo(todo.id)}>X</button>\n      <input type=\"checkbox\" checked={todo.done} onChange={() => todo.toggle()} />\n      <input value={todo.name} onChange={e => todo.setName(e.currentTarget.value)} />\n      <UserPickerView user={todo.assignedTo} store={store} onchange={userId => todo.assignTo(userId)} />\n    </li>\n  )\n});\n\nconst TodoCount = observer(({ store }: { store: RootStoreModel }) => {\n  return (\n    <div>\n      Done {store.completedCount} out of {store.count}.\n    </div>\n  )\n})\n\nconst UserPickerView = observer(({ user, store, onchange }: { user?: UserModel, store: RootStoreModel, onchange: (user?: UserModel) => any }) => {\n  const handleUserChange = React.useCallback<ChangeEventHandler<HTMLSelectElement>>((e) => {\n    const maybeId = e.currentTarget.value;\n    const user = store.users.find(u => u.id === maybeId);\n\n    onchange(user);\n  }, [store, onchange]);\n\n  return (\n    <select value={user?.id ?? ''} onChange={handleUserChange}>\n      <option>-none-</option>\n      {store.users.map((user) => <option value={user.id} key={user.id}>{user.name}</option>)}\n    </select>\n  );\n});\n\nconst UndoRedo = observer(({timeTraveller}: {timeTraveller: TimeTravellerModel}) => {\n  return (\n    <div>\n      <button disabled={!timeTraveller.canUndo} onClick={() => timeTraveller.undo()}>Undo</button>\n      <button disabled={!timeTraveller.canRedo} onClick={() => timeTraveller.redo()}>Redo</button>\n    </div>\n  )\n})\n\nconst App = observer(({ store, timeTraveller }: { store: RootStoreModel, timeTraveller: TimeTravellerModel }) => {\n  return (\n    <div>\n      <UndoRedo timeTraveller={timeTraveller} />\n      <button onClick={() => store.addTodo(uuid.v4(), 'New todo')}>Add Todo</button>\n      <ul>\n        {store.todos.map(todo => <TodoItem key={todo.id} todo={todo} store={store} />)}\n      </ul>\n      <TodoCount store={store} />\n    </div>\n  )\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types, Instance, getSnapshot } from \"mobx-state-tree\";\nimport { autorun, configure } from \"mobx\";\nimport { TimeTraveller } from \"mst-middlewares\";\n\nconst LS_SNAPSHOT_KEY = \"@@maxwellhealth/todos\";\n\nconfigure({\n  enforceActions: \"always\"\n});\n\nexport const Todo = types\n  .model(\"Todo\", {\n    id: types.identifier,\n    name: types.string,\n    done: types.boolean,\n    assignedTo: types.maybe(types.reference(types.late(() => User)))\n  })\n  .actions(self => ({\n    setName(name: string) {\n      self.name = name;\n    },\n    toggle() {\n      self.done = !self.done;\n    },\n    assignTo(user?: UserModel) {\n      self.assignedTo = user;\n    }\n  }));\nexport type TodoModel = Instance<typeof Todo>;\n\nexport const User = types.model(\"User\", {\n  id: types.identifier,\n  name: types.string\n});\nexport type UserModel = Instance<typeof User>;\n\nconst RootStore = types\n  .model(\"RootStore\", {\n    users: types.array(User),\n    todos: types.array(Todo),\n  })\n  .actions(self => ({\n    addTodo(id: string, name: string) {\n      self.todos.push(Todo.create({ id, name, done: false }));\n    },\n    removeTodo(id: string) {\n      self.todos.replace(self.todos.filter(t => t.id !== id));\n    }\n  }))\n  .views(self => ({\n    get count() {\n      return self.todos.length;\n    },\n    get completedCount() {\n      return self.todos.filter(t => t.done).length;\n    }\n  }));\nexport type RootStoreModel = Instance<typeof RootStore>;\n\nfunction getInitialStoreData() {\n  try {\n    const json = localStorage.getItem(LS_SNAPSHOT_KEY) ?? \"\";\n    const snapshot = JSON.parse(json);\n    return snapshot;\n  } catch (err) {}\n\n  return {\n    todos: [],\n    users: [\n      { id: \"1\", name: \"Michał\" },\n      { id: \"2\", name: \"Krzysztof\" },\n      { id: \"3\", name: \"Andrew\" },\n      { id: \"4\", name: \"Mike\" },\n      { id: \"5\", name: \"Erik\" }\n    ]\n  };\n}\n\nexport const store = RootStore.create(getInitialStoreData());\nexport const timeTraveller = TimeTraveller.create({}, { targetStore: store })\nexport type TimeTravellerModel = typeof timeTraveller;\n\nautorun(() => {\n  const json = JSON.stringify(getSnapshot(store));\n  localStorage.setItem(LS_SNAPSHOT_KEY, json);\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store, timeTraveller } from './models';\n\nReactDOM.render(<App store={store} timeTraveller={timeTraveller} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}